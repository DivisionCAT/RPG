{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Object","defineProperty","Array","prototype","value","maxNum","this","Math","floor","random","length","flag","count","randomNum","result","forEach","v","i","push","breads","menu","cheeses","oven","veges","sauce","randomVege","how_many_vege","randomItem","behavior","randomSauce","how_many_sauce","join","App","className","style","textAlign","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAQAA,OAAOC,eAAeC,MAAMC,UAAW,aAAc,CACnDC,MAAO,WAAsB,IAAD,OAAZC,EAAY,uDAAH,EACvB,GAAe,IAAXA,EAAc,OAAOC,KAAKC,KAAKC,MAAMD,KAAKE,SAAWH,KAAKI,SAG9D,IAFA,IAAMC,EAAO,IAAIT,MAAMI,KAAKI,QACxBE,EAAQ,EACLA,EAAQP,GAAQ,CACrB,IAAMQ,EAAYN,KAAKC,MAAMD,KAAKE,SAAWH,KAAKI,QAC9CC,EAAKE,KACTF,EAAKE,IAAa,EAClBD,GAAS,GAEX,IAAIE,EAAS,GAMb,OALAH,EAAKI,SAAQ,SAACC,EAAGC,GACXD,GACFF,EAAOI,KAAK,EAAKD,OAGdH,KAIX,IAAMK,EAAS,CACb,2BACA,eACA,8CACA,qBACA,eACA,kCAEIC,EAAO,CACX,qBACA,0CACA,wCACA,kCACA,wCACA,2DACA,kCACA,wCACA,eACA,2BACA,8CACA,qBACA,UAEIC,EAAU,CAAC,2BAAQ,qBAAO,4BAC1BC,EAAO,CAAC,iCAAS,qBAAO,4DACxBC,EAAQ,CACZ,qBACA,qBACA,eACA,eACA,eACA,eACA,qBACA,2BACA,4BAEIC,EAAQ,CACZ,iCACA,2BACA,wCACA,wCACA,kCACA,sBACA,wCACA,2BACA,iCACA,8CACA,8CACA,kCACA,wCACA,eACA,eACA,yCAGIC,EAAa,WACjB,IAAMC,EAAgB,CAAC,EAAG,EAAG,EAAG,GAAGC,aAC7BC,EAAW,CAAC,iCAAS,4BAAQD,aAInC,OAFoB,IAAlBD,EAAsB,SAAMH,EAAMI,WAAWD,IAEvB,IAAME,GAG1BC,EAAc,WAClB,IAAMC,EAAiB,CAAC,EAAG,EAAG,EAAG,GAAGH,aACpC,OAAuB,IAAnBG,EACK,CAAC,wCAAW,+CAAYH,aAC1BH,EAAMG,WAAWG,GAAgBC,KAAK,OA0DhCC,MAvDf,WACE,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,QACjB,4DACA,4BACEC,MAAO,CACLC,UAAW,SACXC,cAAe,WAGjB,kDACA,sEAGJ,6BAASH,UAAU,QACjB,oEACA,8BACE,2BAAOA,UAAU,eACf,+BACE,4BACE,4CACA,4BAAKb,EAAKO,eAEZ,4BACE,sCACA,4BAAKR,EAAOQ,eAEd,4BACE,4CACA,4BAAKN,EAAQM,eAEf,4BACE,4CACA,4BAAKL,EAAKK,eAEZ,4BACE,4CACA,4BAAKF,MAEP,4BACE,4CACA,4BAAKI,SAKb,4BAAQK,MAAO,CAAEC,UAAW,WAC1B,gECxIUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98efebb5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// [1948, 345, 345, 234, 234,5 34, 634]\n// [true, null, null, true, true]\n//\n\n// eslint-disable-next-line no-extend-native\nObject.defineProperty(Array.prototype, \"randomItem\", {\n  value: function(maxNum = 0) {\n    if (maxNum === 0) return this[Math.floor(Math.random() * this.length)];\n    const flag = new Array(this.length);\n    let count = 0;\n    while (count < maxNum) {\n      const randomNum = Math.floor(Math.random() * this.length);\n      if (flag[randomNum]) continue;\n      flag[randomNum] = true;\n      count += 1;\n    }\n    let result = [];\n    flag.forEach((v, i) => {\n      if (v) {\n        result.push(this[i]);\n      }\n    });\n    return result;\n  }\n});\n\nconst breads = [\n  \"허니오트\",\n  \"하티\",\n  \"파마산 오레가노\",\n  \"화이트\",\n  \"위트\",\n  \"플랫브래드\"\n];\nconst menu = [\n  \"쉬림프\",\n  \"스테이크 & 치즈\",\n  \"써브웨이 멜트\",\n  \"터키 베이컨\",\n  \"치킨 데리야끼\",\n  \"로티세리 바비큐 치킨\",\n  \"로스트 치킨\",\n  \"써브웨이 클럽\",\n  \"터키\",\n  \"에그마요\",\n  \"이탈리안 비엠티\",\n  \"미트볼\",\n  \"햄\"\n];\nconst cheeses = [\"아메리칸\", \"슈레드\", \"모짜렐라\"];\nconst oven = [\"돌려주세요\", \"아니요\", \"양파 넣고 돌려주세요\"];\nconst veges = [\n  \"양상추\",\n  \"토마토\",\n  \"오이\",\n  \"피망\",\n  \"양파\",\n  \"피클\",\n  \"올리브\",\n  \"할라피뇨\",\n  \"아보카도\"\n];\nconst sauce = [\n  \"랜치드레싱\",\n  \"마요네즈\",\n  \"스위트 어니언\",\n  \"허니 머스터드\",\n  \"스위트 칠리\",\n  \"핫 칠리\",\n  \"사우스 웨스트\",\n  \"머스타드\",\n  \"홀스래디쉬\",\n  \"사우전 아일랜드\",\n  \"이탈리안 드레싱\",\n  \"올리브 오일\",\n  \"레드와인 식초\",\n  \"소금\",\n  \"후추\",\n  \"스모크 바비큐\"\n];\n\nconst randomVege = () => {\n  const how_many_vege = [0, 1, 2, 3].randomItem();\n  const behavior = [\"넣어주세요\", \"빼주세요\"].randomItem();\n  const selected_veges =\n    how_many_vege === 0 ? \"다\" : veges.randomItem(how_many_vege);\n\n  return selected_veges + \" \" + behavior;\n};\n\nconst randomSauce = () => {\n  const how_many_sauce = [0, 1, 2, 3].randomItem();\n  if (how_many_sauce === 0)\n    return [\"다 넣어주세요\", \"넣지 말아주세요\"].randomItem();\n  return sauce.randomItem(how_many_sauce).join(\", \");\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"Page\">\n        <header>시작화면</header>\n        <footer\n          style={{\n            textAlign: \"center\",\n            paddingBottom: \"2.5rem\"\n          }}\n        >\n          <p>made by divisionCAT</p>\n          <button>랜덤 빵 생성</button>\n        </footer>\n      </section>\n      <section className=\"Page\">\n        <header>결과 및 공유</header>\n        <main>\n          <table className=\"ResultTable\">\n            <tbody>\n              <tr>\n                <td>메뉴</td>\n                <td>{menu.randomItem()}</td>\n              </tr>\n              <tr>\n                <td>빵</td>\n                <td>{breads.randomItem()}</td>\n              </tr>\n              <tr>\n                <td>치즈</td>\n                <td>{cheeses.randomItem()}</td>\n              </tr>\n              <tr>\n                <td>오븐</td>\n                <td>{oven.randomItem()}</td>\n              </tr>\n              <tr>\n                <td>야채</td>\n                <td>{randomVege()}</td>\n              </tr>\n              <tr>\n                <td>소스</td>\n                <td>{randomSauce()}</td>\n              </tr>\n            </tbody>\n          </table>\n        </main>\n        <footer style={{ textAlign: \"center\" }}>\n          <button>공유하기</button>\n        </footer>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}